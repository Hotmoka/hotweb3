import {Marshallable} from "../../marshalling/Marshallable";
import {createHash} from 'crypto'
import {TransactionReferenceModel} from "../values/TransactionReferenceModel";


export abstract class TransactionRequestModel extends Marshallable {

    /**
     * Yields the reference to the transaction generated by this request.
     * @param signature the signature of this request
     * @return the transaction reference or null
     */
    public getReference(signature: string): TransactionReferenceModel | null {
        try {
            const marshallingContext = this.marshallObject()
            const signature_ = signature || ''
            marshallingContext.writeCompactInt(signature_.length)
            marshallingContext.writeBuffer(Buffer.from(signature_))
            marshallingContext.flush()

            const bytes = marshallingContext.getBuffer()
            const hash = createHash('sha256').update(bytes).digest('hex')
            return new TransactionReferenceModel('local', hash)
        } catch (e) {
            return null
        }
    }
}